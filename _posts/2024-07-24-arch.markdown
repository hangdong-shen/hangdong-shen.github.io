---
layout:     post
title:      "clean architect"
subtitle:   " \"architect \""
date:       2024-07-24 14:27:45 
author:     "Hangdong"
header-img: "img/post-sample-image.jpg"
catalog: true
tags:
    - 工作总结
---

# 前言 #
我大概在刚刚开始进行软件架构设计的时候，接触到了clean architect的架构思想和方式。刚开始进行架构设计的时候，还停留在模块，分层之类的基本元素的组合上，所以当时也寻找一些业界比较好的方法论，综合实践看下，clean architect和SOLID是最佳的设计原则。

---

# 正文 #
## clean architect ##
在实践中，我认为践行clean architecture的关键是依赖规则。这条规则规定源代码只能向内依赖，在最里面的部分对外面一点都不知道，也就是内部不依赖外部，而外部依赖内部。这种依赖包含代码名称，或类的函数，变量或任何其他命名软件实体。
同样，在外面圈中使用的数据格式不应被内圈中使用，特别是如果这些数据格式是由外面一圈的框架生成的。我们不希望任何外圆的东西会影响内圈层。

外圈通常是应用层的最上层，比如UI层；
内圈通常是应用层的最底层，比如数据层，data center这种entities

## Clean Architecture 和 MVVM ##
在实践中，有界面的应用因为需要设计view mode，故通常需要结合clean architecture和MVVM进行架构设计。

从整个应用程序的功能层级来看，分为UI层，业务层，数据层部分，其中数据层，业务层可以在项目间复用，UI层根据不同的项目定义，开放修改。
从依赖视角来看，UI层到业务层，业务层到数据层，层层单向依赖。
从数据视角来看，数据从底层传入后，经由数据层，业务层，UI层，层层对数据进行处理加工。

能够重用的代码（即Business Use Cases和Data层）即是整体软件架构平台层中的业务基础部分，这部分代码可以在不同的项目中复用，可以加速应用层的开发工作。

## 结束
好了，今天暂时更到这，欢迎大家阅读、批评和指正，下回再见。

---


